"use strict";

const personalMovieDB = {
  count: 0,
  movies: {},
  actors: {},
  genres: [],
  privat: false,
  start: function () {
    personalMovieDB.count = +prompt('–°–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤ –≤—ã —É–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏?', "");
    while (personalMovieDB.count == '' || personalMovieDB.count == null || isNaN(personalMovieDB.count)) {
      personalMovieDB.count = +prompt('–°–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤ –≤—ã —É–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏?', "");
    }
  },
  rememberMyFilms: function () {
    for (let i = 0; i < 2; i++) {
      const a = prompt('–û–¥–∏–Ω –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤?', ""),
        b = +prompt('–ù–∞ —Å–∫–æ–ª—å–∫–æ –æ—Ü–µ–Ω–∏—Ç–µ –µ–≥–æ?', "");
      if (a != null && b != null && a != '' && b != '' && a.length < 50) {
        personalMovieDB.movies[a] = b;
        console.log("done");
      } else {
        i--;
        console.log('error');
      }
    }
  },
  detectPersonalLevel: function () {
    if (personalMovieDB.count > 0 && personalMovieDB.count < 10) {
      console.log("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –¥–æ–≤–æ–ª—å–Ω–æ –º–∞–ª–æ —Ñ–∏–ª—å–º–æ–≤");
    } else if (personalMovieDB.count >= 10 && personalMovieDB.count <= 30) {
      console.log("–í—ã –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∑—Ä–∏—Ç–µ–ª—å");
    } else if (personalMovieDB.count > 30) {
      console.log("–í—ã –∫–∏–Ω–æ–º–∞–Ω");
    } else {
      console.log('error');
    }
    // console.log("üöÄ ~ personalMovieDB.count", personalMovieDB.count);
  },
  showMyDB: function (hidden) {
    if (!hidden) {
      console.log("üöÄ ~ personalMovieDB", personalMovieDB);
    }
  },
  toggleVisibleMyDB: function () {
    if (personalMovieDB.privat) {
      personalMovieDB.privat = false;
    } else {
      personalMovieDB.privat = true;
    }
  },
  writeYourGenres: function () {
    for (let i = 1; i <= 3; i++) {
      // const genre = prompt(`–í–∞—à –ª—é–±–∏–º—ã–π –∂–∞–Ω—Ä –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º ${i}`);
      // personalMovieDB.genres[i - 1] = genre;
      personalMovieDB.genres[i - 1] = prompt(`–í–∞—à –ª—é–±–∏–º—ã–π –∂–∞–Ω—Ä –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º ${i}`);
    }
  }
};



/************************************************************************** */
function first() {
  setTimeout(function () {
    console.log(1);
  }, 500);
};

function second() {
  console.log(2);
}

// first();
// second();

function learnJS(lang, callback) {
  console.log(`–Ø —É—á—É: ${lang}`);
  callback();
}

function done() {
  console.log('–Ø –ø—Ä–æ—à–µ–ª —ç—Ç–æ—Ç —É—Ä–æ–∫');
}

// learnJS('JS', done);


const options = {
  name: 'test',
  with: 1024,
  height: 1024,
  colors: {
    border: 'black',
    bg: 'red',
  },
  makeTest: function () {
    // console.log('test');
  },
};

options.makeTest();

// console.log(options['colors']['border']);
// delete options.name;
// console.log('üöÄ ~ options', options);

let count = 0;
for (let key in options) {
  if (typeof (options[key]) === 'object') {
    for (let i in options[key]) {
      // console.log(`–°–≤–æ–π—Å—Ç–≤–æ: ${i} –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ: ${options[key][i]}`);
      count++;
    }
  } else {
    // console.log(`–°–≤–æ–π—Å—Ç–≤–æ: ${key} –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ: ${options[key]}`);
    count++;
  }
}

// console.log(Object.keys(options).length);

const { border, bg } = options.colors;
// console.log('üöÄ ~ border', border);

const arr = [1, 12, 3, 41, 15, 6, 17, 8];
arr.pop();
arr.push(10);
arr.shift();
arr.unshift(0);
// console.log('üöÄ ~ arr', arr);

for (let i = 0; i < arr.length; i++) {
  const element = arr[i];
  // console.log('üöÄ ~ element', element);
}

for (let value of arr) {
  // console.log('üöÄ ~ value', value);
}

arr[99] = 55;
// console.log('üöÄ ~ arr.length', arr.length);
// console.log('üöÄ ~ arr', arr);

arr.forEach(function (item, i, arr) {
  // console.log(`üöÄ ~ ${i} —ç—Ç–æ –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞/–∑–Ω–∞—á–µ–Ω–∏—è "${item}" –≤–Ω—É—Ç—Ä–∏ –º–∞—Å—Å–∏–≤–∞ -> ${arr}`);
});

// const str = prompt('', '');
// const products = str.split(', '); //? –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–µ–ª–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
// console.log('üöÄ ~ products', products);
// products.sort(); //? –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ - —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–∏, –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–∏
// console.log(products.join('; ')); //? –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–µ–ª–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç

arr.sort(compareNum);
function compareNum(a, b) {
  return a - b;
}
// console.log('üöÄ ~ arr', arr);

function copy(mainObj) {
  let objCopy = {};

  let key;
  for (key in mainObj) {
    objCopy[key] = mainObj[key];
  }

  return objCopy;
}

const numbers = {
  a: 2,
  b: 5,
  c: {
    x: 7,
    y: 4
  }
};
// console.log('üöÄ ~ numbers', numbers);

const newNumbers = copy(numbers);
newNumbers.a = 10; //? –∏–∑–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —É –∫–æ–ø–∏–∏ –º–∞—Å—Å–∏–≤–∞
newNumbers.c.x = 10; //? –∏–∑–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —É –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
// console.log('üöÄ ~ newNumbers', newNumbers);

const add = {
  d: 17,
  e: 20
}

const resultAdd = Object.assign(numbers, add); //? –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–µ—Ö —á—Ç–æ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö (–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–∞—è –∫–æ–ø–∏—è)
// console.log('üöÄ ~ resultAdd', resultAdd);

const resultCopy = Object.assign({}, add); //? —á–∏—Å—Ç–∞—è (–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–∞—è) –∫–æ–ø–∏—è –æ–±—ä–µ–∫—Ç–∞
// console.log('üöÄ ~ resultCopy', resultCopy);
resultCopy.d = 20; //? –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
// console.log('üöÄ ~ resultCopy', resultCopy);

const oldArr = ['a', 'd', 'c'];
const newArr = oldArr.slice(); //? —Å–ª–∞–π—Å –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–ø–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤
newArr[1] = 'sdfsdfdsf';
// console.log('üöÄ ~ oldArr', oldArr);
// console.log('üöÄ ~ newArr', newArr);

const video = ['youtube', 'vimeo', 'rutube'],
  blogs = ['wordpress', 'livejournal', 'blogger'],
  internet = [...video, ...blogs, 'in', 'fb']; //? —Å–ø—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä/–æ–ø–µ—Ä–∞—Ç–æ—Ä —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞
// console.log('üöÄ ~ video', video);
// console.log('üöÄ ~ blogs', blogs);
// console.log('üöÄ ~ internet', internet);

function log(a, b, c) { //? —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å–≤–æ–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
  // console.log(a);
  // console.log(b);
  // console.log(c);
}

const num = [2, 5, 7, 9, 12];
log(...num); //? –∑–∞—Å–ø—Ä–µ–¥–∏–≤ –º–∞—Å—Å–∏–≤ –ø–µ—Ä–µ–¥–∞–ª–∏ –µ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º

const array = ['a', 'b'];
const newArray = [...array]; //? –µ—â–µ –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ (–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–∞—è –∫–æ–ø–∏—è)
// console.log('üöÄ ~ newArray', newArray);

const obj = {
  one: 1,
  two: 2
}

const newObj = { ...obj }; //? –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –û–ë–™–ï–ö–¢–ê (–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–∞—è –∫–æ–ø–∏—è)
// console.log('üöÄ ~ newObj', newObj);

let str = 'some';
let strObj = new String(str);
// console.log('üöÄ ~ str', typeof(str));
// console.log('üöÄ ~ strObj', typeof(strObj));

// console.dir([1, 2, 3]);

const solder = {
  health: 400,
  armor: 100,
  sayHello: function () {
    console.log('Hello');
  }
};
//? —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –î–∂–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ—Ç–æ—Ç–∏–ø–Ω–æ –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –æ—Ç —Å–æ–ª–¥–∞—Ç–∞,
//? –±–µ—Å—Ç-–ø—Ä–∞–∫—Ç–∏—Å - —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –ø—Ä–æ—Ç–æ—Ç–∏–ø—É ->
const john = Object.create(solder);

// const john = {

//   health: 100
// };

// john.__proto__ = solder; //? –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –î–∂–æ–Ω—É –ø—Ä–æ—Ç–æ—Ç–∏–ø –æ—Ç —Å–æ–ª–¥–∞—Ç–∞ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç)
// Object.setPrototypeOf(john,solder); //? —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤
// console.log('üöÄ ~ john', john);
// console.log('üöÄ ~ john.armor', john.armor); //? —É –î–∂–æ–Ω–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –±—Ä–æ–Ω—è –æ—Ç –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞
// john.sayHello(); //? —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Ç–æ–º—É —á—Ç–æ —É –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ —Å–æ–ª–¥–∞—Ç –µ—Å—Ç—å —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è



